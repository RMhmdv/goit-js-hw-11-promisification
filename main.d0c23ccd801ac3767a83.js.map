{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger","table","makeTransaction","min","max","id","Math","floor","random","canProcess","logSuccess","logError","warn","amount","catch"],"mappings":"yLAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQF,KACPA,OAIDK,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAElBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAMvB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAEjE,OAAO,IAAIjB,SAAQ,SAACC,EAASC,GAC3BD,EAAQc,OAING,EAAS,SAAAH,GAAY,OAAIT,QAAQa,MAAMJ,IAE7CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAKnC,IAIME,EAAkB,SAAC,GAAW,IAJDC,EAAKC,EAIbC,EAAS,EAATA,GACnBzB,GAL2BuB,EAKO,IALFC,EAKO,IAJtCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAK9CM,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAI1B,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLwB,GACF1B,EAAQ,CAAEsB,KAAIzB,UAEhBI,EAAOqB,KACNzB,OAID8B,EAAa,SAAC,GAAgB,IAAfL,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,MACvBQ,QAAQC,IAAR,eAA2BgB,EAA3B,iBAA8CzB,EAA9C,QAGI+B,EAAW,SAAAN,GACfjB,QAAQwB,KAAR,gCAA6CP,EAA7C,8BAIDH,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAChCvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.d0c23ccd801ac3767a83.js","sourcesContent":["import './styles.css';\n\n//Задача 1\n\nconst delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  })  \n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);      \n      // Вызовы функции для проверки\n      delay(2000).then(logger1); // Resolved after 2000ms\n      delay(1000).then(logger1); // Resolved after 1000ms\n      delay(1500).then(logger1); // Resolved after 1500ms\n\n\n\n// Задача 2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user);\n  \n  return new Promise((resolve, reject) => {\n    resolve(updatedUsers);\n  });\n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n\n// Задача 3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id }) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  const canProcess = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (canProcess) {\n        resolve({ id, delay });\n      }\n      reject(id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({id, delay}) => {\n  console.log(`Transaction ${id} processed in ${delay} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n makeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"],"sourceRoot":""}